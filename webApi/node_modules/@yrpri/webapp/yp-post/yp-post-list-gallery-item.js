var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, css, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { YpBaseElement } from '../common/yp-base-element.js';
import './yp-post-gallery-image.js';
import './yp-post-actions.js';
import '../yp-magic-text/yp-magic-text.js';
import '@material/web/iconbutton/icon-button.js';
let YpPostListGalleryItem = class YpPostListGalleryItem extends YpBaseElement {
    constructor() {
        super(...arguments);
        this.descriptionOpen = false;
        this.mini = false;
        this.isAudioCover = false;
    }
    static get styles() {
        return [
            super.styles,
            css `
        .mainContainer {
          margin: 32px;
          margin-top: 48px;
          margin-bottom: 16px;
        }

        .authorName,
        .artName {
          font-size: 26px;
          line-height: 1.4;
          min-width: 350px;
        }

        .authorName {
          font-weight: bold;
          padding-top: 8px;
          width: 100%;
        }

        .artName {
          padding-top: 0;
        }

        .description {
          font-size: 20px;
          line-height: 1.4;
          text-align: right;
          margin-bottom: 8px;
        }

        .descriptionText {
          text-align: justify;
          margin-bottom: 8px;
          margin-top: 8px;
        }

        .image {
          margin-bottom: 8px;
        }

        .postActions {
          height: 30px;
          margin-left: -16px;
        }

        .mainDataContainer {
          max-width: 600px;
          width: 600px;
          border-top: 2px solid #000;
        }

        md-icon-button.openCloseButton {
          --md-icon-button-icon-size: 48px;
          width: 64px;
          height: 64px;
          padding-left: 0;
          margin-left: 0;
          align-self: flex-end;
          justify-content: flex-end;
          margin-right: -24px;
          color: #000;
        }

        @media (max-width: 800px) {
          .authorName,
          .artName {
            font-size: 26px;
            min-width: 100%;
            color: #000;
          }

          .image {
            margin-bottom: 8px;
          }

          .mainDataContainer {
            max-width: 100%;
            width: 100%;
          }
        }

        .shareIcon {
          text-align: right;
          width: 48px;
          height: 48px;
        }

        .shareText {
          font-size: 16px;
          color: #656565;
          margin-right: 5px;
        }
      `,
        ];
    }
    renderShare() {
        return html `
      <div class="share" ?hidden="${this.post.Group.configuration?.hideSharing}">
        <md-icon-button
          class="shareIcon"
          .label="${this.t('share')}"
          @click="${this._shareTap}"
        >
          <md-icon>share</md-icon>
        </md-icon-button>
        <div class="shareText">${this.t('share')}</div>
      </div>
    `;
    }
    render() {
        return html `
      <div class="layout vertical mainContainer">
        <div class="layout vertical center-center">
          <yp-post-gallery-image
            class="image"
            .post="${this.post}"
            .imageWidth="${this.post.public_data?.galleryImageData?.width}"
            .imageHeight="${this.post.public_data?.galleryImageData?.height}"
            alt-tag="${this.post.name}"
            sizing-mode="cover"
          ></yp-post-gallery-image>
          <div class="layout vertical mainDataContainer">
            <div class="layout horizontal">
              <div class="layout vertical">
                <div class="authorName">${this.post.description}</div>
                <div class="artName">${this.post.name}</div>
                <yp-post-actions
                  class="postActions"
                  .post="${this.post}"
                  larger-icons
                  forceHideDebate
                ></yp-post-actions>
              </div>
              <div class="flex"></div>
              <div class="layout vertical">
                ${!this.descriptionOpen
            ? html `
                      <a
                        href="${ifDefined(this._getPostLink(this.post))}"
                        id="mainA"
                        @click="${this._savePostToBackCache}"
                      >
                        <md-icon-button class="openCloseButton"
                          ><md-icon>keyboard-arrow-right</md-icon></md-icon-button
                        >
                      </a>
                    `
            : nothing}
              </div>
            </div>
            ${this.descriptionOpen
            ? html `
                  ${this.renderShare()}
                  <div class="description">
                    ${this.post.public_data?.galleryMetaData?.Upphafsar}
                  </div>
                  <div
                    class="description"
                    ?hidden="${!this.post.public_data?.galleryMetaData?.Haed}"
                  >
                    ${this.post.public_data?.galleryMetaData?.Haed} x
                    ${this.post.public_data?.galleryMetaData?.Breidd}cm
                  </div>
                  <div
                    class="description descriptionText"
                    ?hidden="${!this.post.public_data?.galleryMetaData?.texti_um_verk_fyrir_vef}"
                  >
                    ${this.post.public_data?.galleryMetaData?.texti_um_verk_fyrir_vef}
                  </div>
                `
            : nothing}
          </div>
        </div>
      </div>
    `;
    }
    _savePostToBackCache() {
        if (this.post) {
            window.appGlobals.cache.cachedPostItem = this.post;
        }
    }
    _getPostLink(post) {
        if (post) {
            if (post.Group.configuration &&
                post.Group.configuration.disablePostPageLink) {
                return '#';
            }
            else if (post.Group.configuration &&
                post.Group.configuration.resourceLibraryLinkMode) {
                return post.description.trim();
            }
            else {
                return '/post/' + post.id;
            }
        }
        else {
            console.warn('Trying to get empty post link');
            return '#';
        }
    }
    _sharedContent(event) {
        const shareData = event.detail;
        window.appGlobals.activity('postShared', shareData.social, this.post ? this.post.id : -1);
    }
    get _fullPostUrl() {
        return encodeURIComponent('https://' + window.location.host + '/post/' + this.post.id);
    }
    _shareTap(event) {
        window.appGlobals.activity('postShareCardOpen', event.detail.brand, this.post ? this.post.id : -1);
        window.appDialogs.getDialogAsync('shareDialog', (dialog) => {
            dialog.open(this._fullPostUrl, this.post.name, this.$$('yp-post-gallery-image').anyImagePath || '', this._sharedContent);
        });
    }
};
__decorate([
    property({ type: Object })
], YpPostListGalleryItem.prototype, "post", void 0);
__decorate([
    property({ type: Boolean, attribute: 'description-open' })
], YpPostListGalleryItem.prototype, "descriptionOpen", void 0);
__decorate([
    property({ type: Boolean })
], YpPostListGalleryItem.prototype, "mini", void 0);
__decorate([
    property({ type: Boolean })
], YpPostListGalleryItem.prototype, "isAudioCover", void 0);
YpPostListGalleryItem = __decorate([
    customElement('yp-post-list-gallery-item')
], YpPostListGalleryItem);
export { YpPostListGalleryItem };
//# sourceMappingURL=yp-post-list-gallery-item.js.map