import { nothing } from 'lit';
import '@yrpri/webapp/common/yp-image.js';
import '@material/web/checkbox/checkbox.js';
import '@material/web/button/outlined-button.js';
import '@material/web/progress/circular-progress.js';
import '@material/web/iconbutton/icon-button.js';
import { PsRouter } from './router/router.js';
import { YpBaseElement } from '@yrpri/webapp/common/yp-base-element.js';
export declare abstract class PsStageBase extends YpBaseElement {
    memory: PsBaseMemoryData;
    childType: "solution" | "policy";
    showEloRatings: boolean;
    activeSubProblemIndex: number | null;
    activeSolutionIndex: number | null;
    activePolicyIndex: number | null;
    activePopulationIndex: number;
    firstTimeSubProblemClick: boolean;
    activeGroupIndex: number | null;
    longDescriptions: boolean;
    router: PsRouter;
    displayStates: Map<any, any>;
    subProblemListScrollPositionX: number;
    subProblemListScrollPositionY: number;
    subProblemColors: string[];
    maxTopSearchQueries: number;
    maxUsedSearchResults: number;
    connectedCallback(): void;
    updateRoutes(): void;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    exitSubProblemScreen(): void;
    toggleDisplayState(title: string): Promise<void>;
    toggleScores(): void;
    fixImageUrlIfNeeded(url: string): string;
    static get styles(): any[];
    isUsedSearch(result: IEngineSearchResultItem, index: number): "" | "selectedSearchItem";
    closeSubProblem(event: CustomEvent): void;
    setSubProblemColor(index: number): void;
    setSubProblem(index: number): void;
    toggleDarkMode(): void;
    renderThemeToggle(): import("lit").TemplateResult<1>;
    renderProblemStatement(title?: string | undefined): import("lit").TemplateResult<1>;
    renderSubProblemList(subProblems: IEngineSubProblem[], title?: string): import("lit").TemplateResult<1>;
    getImgHeight(renderCloseButton: boolean): 170 | 275 | 177 | 193;
    getImgWidth(renderCloseButton: boolean): 298 | 481 | 310 | 350;
    renderSubProblemImageUrl(renderCloseButton: boolean, subProblem: IEngineSubProblem): import("lit").TemplateResult<1>;
    renderSubProblem(subProblem: IEngineSubProblem, isLessProminent: boolean, index: number, renderCloseButton?: boolean, renderMoreInfo?: boolean, hideAllButtons?: boolean): import("lit").TemplateResult<1>;
    renderSearchQueries(title: string, searchQueries: IEngineSearchQueries): import("lit").TemplateResult<1> | typeof nothing;
    getUrlInRightSize(url: string): string;
    renderSearchResults(title: string, searchResults: IEngineSearchResults): import("lit").TemplateResult<1> | typeof nothing;
}
//# sourceMappingURL=ps-stage-base.d.ts.map