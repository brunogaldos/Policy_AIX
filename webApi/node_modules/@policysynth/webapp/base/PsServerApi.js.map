{"version":3,"file":"PsServerApi.js","sourceRoot":"","sources":["../../src/base/PsServerApi.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,kCAAkC,CAAC;AAE/D,MAAM,OAAO,WAAY,SAAQ,WAAW;IAC1C,YAAY,UAAkB,MAAM;QAClC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;IAC7B,CAAC;IAEM,KAAK,CAAC,UAAU,CACrB,EAAU,EACV,YAAqB,EACrB,wBAAiC;QAEjC,OAAO,CAAC,MAAM,IAAI,CAAC,YAAY,CAC7B,IAAI,CAAC,WAAW;YACd,aAAa,EAAE,GAAG,wBAAwB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GACtD,YAAY,CAAC,CAAC,CAAC,QAAQ,YAAY,EAAE,CAAC,CAAC,CAAC,EAC1C,EAAE,CACL,CAA+B,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,kBAAkB,CAAC,EAAU,EAAE,eAAuB;QACjE,OAAO,CAAC,MAAM,IAAI,CAAC,YAAY,CAC7B,IAAI,CAAC,WAAW,GAAG,aAAa,EAAE,IAAI,eAAe,mBAAmB,CACzE,CAAmC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,cAAc,CACzB,EAAU,EACV,eAAuB,EACvB,WAAmB;QAEnB,OAAO,CAAC,MAAM,IAAI,CAAC,YAAY,CAC7B,IAAI,CAAC,WAAW;YACd,aAAa,EAAE,IAAI,eAAe,IAAI,WAAW,cAAc,CAClE,CAA0C,CAAC;IAC9C,CAAC;CA2FF","sourcesContent":["import { YpServerApi } from \"@yrpri/webapp/common/YpServerApi\";\n\nexport class PsServerApi extends YpServerApi {\n  constructor(urlPath: string = '/api') {\n    super();\n    this.baseUrlPath = urlPath;\n  }\n\n  public async getProject(\n    id: number,\n    tempPassword?: string,\n    forceGetBackupForProject?: string\n  ): Promise<CpsBootResponse> {\n    return (await this.fetchWrapper(\n      this.baseUrlPath +\n        `/projects/${id}${forceGetBackupForProject ? `/new` : ``}${\n          tempPassword ? `?trm=${tempPassword}` : ''\n        }`\n    )) as unknown as CpsBootResponse;\n  }\n\n  public async getMiddleSolutions(id: number, subProblemIndex: number): Promise<IEngineSolution[][]> {\n    return (await this.fetchWrapper(\n      this.baseUrlPath + `/projects/${id}/${subProblemIndex}/middle/solutions`\n    )) as unknown as IEngineSolution[][];\n  }\n\n  public async getRawEvidence(\n    id: number,\n    subProblemIndex: number,\n    policyTitle: string\n  ): Promise<PSEvidenceRawWebPageData[]> {\n    return (await this.fetchWrapper(\n      this.baseUrlPath +\n        `/projects/${id}/${subProblemIndex}/${policyTitle}/rawEvidence`\n    )) as unknown as PSEvidenceRawWebPageData[];\n  }\n\n  /*\n  public getEarl(earlName: string): AoiEarlResponse {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/earls/${earlName}.json`\n    ) as unknown as AoiEarlResponse;\n  }\n\n  public getSurveyResults(earlName: string): AoiResultData[] {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/questions/${earlName}/results.json`\n    ) as unknown as AoiResultData[];\n  }\n\n  getSurveyAnalysis(\n    earlName: string,\n    analysisIndex: number,\n    analysisTypeIndex: number\n  ): AnalysisTypeData {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/questions/${earlName}/${analysisIndex}/${analysisTypeIndex}/analysis.json`\n    ) as unknown as AnalysisTypeData;\n  }\n\n  public submitIdea(questionId: number, newIdea: string): AoiAddIdeaResponse {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/questions/${questionId}/add_idea.js`,\n      {\n        method: 'POST',\n        body: JSON.stringify({ new_idea: newIdea }),\n      },\n      false\n    ) as unknown as AoiAddIdeaResponse;\n  }\n\n  public postVote(\n    questionId: number,\n    promptId: number,\n    locale: string,\n    body: AoiVoteData\n  ): AoiVoteResponse {\n    const url = new URL(\n      `${window.location.protocol}//${window.location.host}${this.baseUrlPath}/questions/${questionId}/prompts/${promptId}/votes.js?locale=${locale}`\n    );\n\n    Object.keys(window.psAppGlobals.originalQueryParameters).forEach(key => {\n      if (key.startsWith('utm_')) {\n        url.searchParams.append(\n          key,\n          window.psAppGlobals.originalQueryParameters[key]\n        );\n      }\n    });\n\n    const browserId = window.appUser.getBrowserId();\n    const browserFingerprint = window.appUser.browserFingerprint;\n    const browserFingerprintConfidence = window.appUser.browserFingerprintConfidence;\n\n    url.searchParams.append(\"checksum_a\", browserId);\n    url.searchParams.append(\"checksum_b\", browserFingerprint);\n    url.searchParams.append(\"checksum_c\", browserFingerprintConfidence.toString());\n\n    return this.fetchWrapper(\n      url.toString(),\n      {\n        method: 'POST',\n        body: JSON.stringify(body),\n      },\n      false\n    ) as unknown as AoiVoteResponse;\n  }\n\n  public postVoteSkip(\n    questionId: number,\n    promptId: number,\n    locale: string,\n    body: AoiVoteSkipData\n  ): AoiVoteResponse {\n    return this.fetchWrapper(\n      this.baseUrlPath +\n        `/questions/${questionId}/prompts/${promptId}/skip.js?locale=${locale}`,\n      {\n        method: 'POST',\n        body: JSON.stringify(body),\n      },\n      false\n    ) as unknown as AoiVoteResponse;\n  }\n  */\n}\n"]}