{"version":3,"file":"generateDocumentation.js","sourceRoot":"","sources":["../../src/tools/generateDocumentation.ts"],"names":[],"mappings":"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","sourcesContent":["const renderSystemPrompt = (path: string, type: \"customElement\" | \"class\") => `\nYou are a detail oriented document generator that generates API documentation in the standard Markdown API documentation format.\n\nImportant Instructions\nFor Type use the Typescript definition like for currentMemory use PsBaseMemoryData | undefined\n\nLook at the markdown sections below and always output those with your detailed documentation.\n\nOnly output the routes if controllers.\n\nThe fullpath to this file is ${path.replace(\"/src\",\"\")} use that to inform the example path you output.\n\nYou MUST output the full detailed documentation for the typescript file the user submits.\n\nExample markdown format:\n# ClassName\n\nBrief description of the class.\n\n## Properties\n\n| Name          | Type   | Description               |\n|---------------|--------|---------------------------|\n| propertyName  | type   | Brief description.        |\n\n## Methods\n\n| Name       | Parameters        | Return Type | Description                 |\n|------------|-------------------|-------------|-----------------------------|\n| methodName | param1: type, ... | returnType  | Brief description of method |\n\n## Events\n\n## Example\n\n${type === \"customElement\" ? `\n\\`\\`\\`typescript\n// Custom element example\nimport '@policysynth/webapp/base/chatBot/ps-chat-assistant.js';\n\n...Lit v2 Example with @customElement @property (at least one) and render() with html showing the component...\n\\`\\`\\`\n` : ``}\n\\`\\`\\`typescript\n// Class example\n{ PsAppUser } from '@policysynth/webapp/base/PsAppUser.js';\n\n...Class Extend Example...\n\\`\\`\\`\n\n`\n\nconst indexHeader = '# Policy Webapp API Documentation\\n\\n'\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport { OpenAI } from 'openai';\n\nconst openaiClient = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst rootDir = process.cwd();\nconst docsDir = path.join(rootDir, 'docs');\nconst checksumDir = path.join(docsDir, 'cks');\n\n// Ensure the docs and checksum directories exist\nif (!fs.existsSync(docsDir)) {\n  fs.mkdirSync(docsDir, { recursive: true });\n}\nif (!fs.existsSync(checksumDir)) {\n  fs.mkdirSync(checksumDir, { recursive: true });\n}\n\nfunction buildDirectoryTree(dir: string, basePath = '', isSrc = false) {\n  let structure: any[] = [];\n\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  entries.forEach(entry => {\n      if (entry.name === 'cks' || entry.name === 'README.md' || entry.name.endsWith('.d.ts') || entry.name.startsWith('.')) {\n          return; // skip cks directory, TypeScript declaration files, and hidden files\n      }\n\n      const relativePath = isSrc ? entry.name : path.join(basePath, entry.name);\n\n      if (entry.isDirectory()) {\n          // Flatten the 'src' directory into the top level\n          const children = buildDirectoryTree(path.join(dir, entry.name), relativePath, isSrc || entry.name === 'src');\n          if (entry.name === 'src') {\n              structure = structure.concat(children);\n          } else {\n              structure.push({\n                  type: 'directory',\n                  name: entry.name,\n                  path: relativePath,\n                  children: children\n              });\n          }\n      } else if (entry.isFile() && entry.name.endsWith('.md')) {\n          structure.push({\n              type: 'file',\n              name: entry.name,\n              path: relativePath\n          });\n      }\n  });\n\n  return structure;\n}\n\nfunction generateMarkdownFromTree(tree: any, depth = 0, basePath = 'src/') {\n  let markdown = '';\n  const indent = '  '.repeat(depth);\n\n  tree.forEach((item: any) => {\n      if (item.type === 'directory') {\n          markdown += `${indent}- ${item.name}\\n`;\n          // Append the directory name to the basePath for subdirectories\n          const newBasePath = depth === 0 ? `${item.name}/` : `${basePath}${item.name}/`;\n          markdown += generateMarkdownFromTree(item.children, depth + 1, newBasePath);\n      } else if (item.type === 'file') {\n          // Prepend 'src/' to the basePath for files at the root, and adjust for subdirectories\n          const relativePath = `src/${basePath}${item.path}`;\n          markdown += `${indent}- [${item.name.replace('.md', '')}](${relativePath})\\n`;\n      }\n  });\n\n  return markdown;\n}\n\n\nfunction generateDocsReadme() {\n  const tree = buildDirectoryTree(docsDir);\n  console.log(JSON.stringify(tree, null, 2));\n  const markdown = generateMarkdownFromTree(tree);\n  fs.writeFileSync(path.join(docsDir, 'README.md'), `${indexHeader}${markdown}`);\n}\n\nfunction findTSFiles(dir: string, fileList: string[] = []): string[] {\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n  for (const entry of entries) {\n    if (entry.name === 'node_modules' || entry.name.endsWith('.d.ts')) {\n      continue;\n    }\n\n    const fullPath = path.join(dir, entry.name);\n    if (entry.isDirectory()) {\n      findTSFiles(fullPath, fileList);\n    } else if (entry.isFile() && entry.name.endsWith('.ts') && entry.name !== 'index.ts') {\n      fileList.push(fullPath);\n    }\n  }\n\n  return fileList;\n}\n\nfunction generateChecksum(content: string): string {\n  return crypto.createHash('sha256').update(content).digest('hex');\n}\n\nasync function generateDocumentation(fileList: string[]): Promise<void> {\n  for (const file of fileList) {\n    const content = fs.readFileSync(file, 'utf8');\n    const checksum = generateChecksum(content);\n    const checksumFile = path.join(checksumDir, path.basename(file) + '.cks');\n\n    let existingChecksum = '';\n    if (fs.existsSync(checksumFile)) {\n      existingChecksum = fs.readFileSync(checksumFile, 'utf8');\n    }\n\n    let relativePath = file.replace(rootDir, '').replace(\"/src/\",\"\").replace(\".ts\",\".js\");\n    relativePath = `@policysynth/webapp/${relativePath}`;\n\n    console.log(`REL: ${relativePath}`);\n\n    const type = content.includes('@customElement') ? \"customElement\" : \"class\";\n\n    if (checksum !== existingChecksum) {\n      try {\n        console.log(`${file}:`);\n        const completion = await openaiClient.chat.completions.create({\n          model: \"gpt-4-0125-preview\",\n          temperature: 0.0,\n          max_tokens: 4095,\n          messages: [{ role: \"system\", content: renderSystemPrompt(relativePath, type ) }, { role: \"user\", content: content }],\n        });\n\n        let docContent = completion.choices[0].message.content;\n\n        console.log(docContent);\n        docContent = docContent!.replace(/```markdown\\s+/g, '');\n\n        const docFilePath = file.replace(rootDir, docsDir).replace('.ts', '.md');\n        const docDirPath = path.dirname(docFilePath);\n\n        if (!fs.existsSync(docDirPath)) {\n          fs.mkdirSync(docDirPath, { recursive: true });\n        }\n\n        fs.writeFileSync(docFilePath, docContent);\n        fs.writeFileSync(checksumFile, checksum); // Save the new checksum\n        console.log(`Documentation generated for ${file}`);\n      } catch (error) {\n        console.error(`Error generating documentation for ${file}:`, error);\n        process.exit(1);\n      }\n    } else {\n      console.log(`Skipping documentation generation for ${file}, no changes detected.`);\n    }\n  }\n}\n\nasync function main(): Promise<void> {\n  const tsFiles = findTSFiles(rootDir);\n  generateDocsReadme();\n  await generateDocumentation(tsFiles);\n  generateDocsReadme();\n}\n\nmain().then(() => console.log('Documentation generation complete.'));"]}