import { nothing } from 'lit';
import '@yrpri/webapp/common/yp-image.js';
import { PsStageBase } from '../base/ps-stage-base.js';
import '@material/web/chips/chip-set.js';
import '@material/web/chips/filter-chip.js';
import '@material/web/iconbutton/icon-button.js';
import '@material/web/select/outlined-select.js';
import '@material/web/select/select-option.js';
import '@material/web/iconbutton/outlined-icon-button.js';
import '@material/web/iconbutton/filled-icon-button.js';
import '@material/web/chips/input-chip.js';
import '@material/web/textfield/outlined-text-field.js';
import './ps-family-tree.js';
export declare class PsSolutions extends PsStageBase {
    isDropdownVisible: boolean;
    searchText: string;
    activeFilteredSolutionIndex: number;
    isSearchVisible: boolean;
    hideExtraSolutionInformation: boolean;
    isLoadingMiddle: boolean;
    groupListScrollPositionY: number;
    lastKeys: any[];
    findBarProbablyOpen: boolean;
    handleGroupButtonClick(groupIndex: number): Promise<void>;
    reset(): void;
    private touchStartX;
    private minSwipeDistance;
    solutionListScrollPositionX: number;
    solutionListScrollPositionY: number;
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    updateSwipeIndex(direction: string): void;
    loadMiddleData(): Promise<void>;
    handleKeyDown(e: KeyboardEvent): void;
    exitSolutionScreen(): void;
    handleTouchStart(e: TouchEvent): void;
    handleTouchEnd(e: TouchEvent): void;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    static get styles(): (any[] | import("lit").CSSResult)[];
    get filteredSolutions(): IEngineSolution[];
    render(): import("lit").TemplateResult<1> | typeof nothing;
    renderSolutionItem(solution: IEngineSolution, index: number): import("lit").TemplateResult<1>;
    renderSubProblemScreen(subProblem: IEngineSubProblem): import("lit").TemplateResult<1>;
    renderChipSet(subProblem: IEngineSubProblem): import("lit").TemplateResult<1> | typeof nothing;
    toggleSearchVisibility(): void;
    renderSearchField(): import("lit").TemplateResult<1>;
    handleSearchBlur(): void;
    renderFilterChips(items: IEngineSolution[][], startIndex: number): import("lit").TemplateResult<1>[];
    handleDropdownChange(e: Event): void;
    toggleDropdownVisibility(): Promise<void>;
    resetDropdown(): void;
    renderDropdown(middleItems: IEngineSolution[][], startIndex: number): import("lit").TemplateResult<1> | typeof nothing;
    camelCaseToRegular(text: string): string;
    renderRatings(solution: IEngineSolution): import("lit").TemplateResult<1>;
    renderSolutionNavigationButtons(solutionIndex: number, solutions: IEngineSolution[]): import("lit").TemplateResult<1>;
    getSolutionImgHeight(): 314 | 150;
    getSolutionImgWidth(): 550 | 263;
    renderSolutionImage(solution: IEngineSolution): import("lit").TemplateResult<1>;
    renderSolutionScreen(solutionIndex: number): import("lit").TemplateResult<1> | typeof nothing;
}
//# sourceMappingURL=ps-solutions.d.ts.map