{"version":3,"file":"LtpServerApi.js","sourceRoot":"","sources":["../../src/ltp/LtpServerApi.ts"],"names":[],"mappings":"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","sourcesContent":["import { YpServerApi } from \"@yrpri/webapp/common/YpServerApi\";\n\nexport class LtpServerApi extends YpServerApi {\n  baseLtpPath = '/crt/';\n  constructor(urlPath: string = '/api') {\n    super();\n    this.baseUrlPath = urlPath;\n  }\n\n  public async getCrt(groupId: number): Promise<LtpCurrentRealityTreeData> {\n    return (await this.fetchWrapper(this.baseUrlPath + `${this.baseLtpPath}${groupId}`,{}, false)) as unknown as LtpCurrentRealityTreeData;\n  }\n\n  public createTree(\n    crt: LtpCurrentRealityTreeData\n  ): Promise<LtpCurrentRealityTreeData> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `/crt`,\n      {\n        method: 'POST',\n        body: JSON.stringify(crt),\n      },\n      false\n    ) as Promise<LtpCurrentRealityTreeData>;\n  }\n\n  public updateNodeChildren(\n    treeId: string | number,\n    nodeId: string,\n    childrenIds: string[]\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${treeId}/updateChildren`,\n      {\n        method: 'PUT',\n        body: JSON.stringify({\n          nodeId,\n          childrenIds\n        }),\n      },\n      false\n    ) as Promise<void>;\n  }\n\n\n  public reviewConfiguration(\n    wsClientId: string,\n    crt: LtpCurrentRealityTreeData\n  ): Promise<string> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}/reviewConfiguration`,\n      {\n        method: 'PUT',\n        body: JSON.stringify({\n          context: crt.context,\n          undesirableEffects: crt.undesirableEffects,\n          wsClientId,\n        }),\n      },\n      false,\n      undefined\n    ) as Promise<string>;\n  }\n\n  public createDirectCauses(\n    treeId: string | number,\n    parentNodeId: string\n  ): Promise<LtpCurrentRealityTreeDataNode[]> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${treeId}/createDirectCauses`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          parentNodeId,\n        }),\n      },\n      false\n    ) as Promise<LtpCurrentRealityTreeDataNode[]>;\n  }\n\n  public addDirectCauses(\n    treeId: string | number,\n    parentNodeId: string,\n    causes: string[],\n    type: CrtNodeType\n  ): Promise<LtpCurrentRealityTreeDataNode[]> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${treeId}/addDirectCauses`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          parentNodeId,\n          causes,\n          type\n        }),\n      },\n      false\n    ) as Promise<LtpCurrentRealityTreeDataNode[]>;\n  }\n\n  public sendGetRefinedCauseQuery(\n    crtTreeId: string | number,\n    crtNodeId: string,\n    chatLog: PsAiChatWsMessage[],\n    wsClientId: string,\n    effect?: string,\n    causes?: string[],\n    validationErrors?: string[]\n  ): Promise<LtpChatBotCrtMessage> {\n    // Filter out all chatMessages with type==thinking\n    chatLog = chatLog.filter(chatMessage => chatMessage.type != 'thinking' && chatMessage.type != 'noStreaming');\n\n    const simplifiedChatLog = chatLog.map(chatMessage => {\n      return {\n        sender: chatMessage.sender == 'bot' ? 'assistant' : 'user',\n        message: chatMessage.rawMessage\n          ? chatMessage.rawMessage\n          : chatMessage.message,\n      };\n    });\n\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${crtTreeId}/getRefinedCauses`,\n      {\n        method: 'POST',\n        body: JSON.stringify({ wsClientId, crtNodeId, chatLog: simplifiedChatLog, effect, causes, validationErrors }),\n      },\n      false\n    ) as Promise<LtpChatBotCrtMessage>;\n  }\n\n  public runValidationChain(\n    crtTreeId: string | number,\n    crtNodeId: string,\n    chatLog: PsAiChatWsMessage[],\n    wsClientId: string,\n    effect: string,\n    causes: string[]\n  ): Promise<LtpChatBotCrtMessage> {\n    // Filter out all chatMessages with type==thinking\n    chatLog = chatLog.filter(chatMessage => chatMessage.type != 'thinking' && chatMessage.type != 'noStreaming');\n\n    const simplifiedChatLog = chatLog.map(chatMessage => {\n      return {\n        sender: chatMessage.sender == 'bot' ? 'assistant' : 'user',\n        message: chatMessage.rawMessage\n          ? chatMessage.rawMessage\n          : chatMessage.message,\n      };\n    });\n\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${crtTreeId}/runValidationChain`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          wsClientId,\n          crtNodeId,\n          chatLog: simplifiedChatLog,\n          effect,\n          causes,\n        }),\n      },\n      false\n    ) as Promise<LtpChatBotCrtMessage>;\n  }\n\n\n  public updateNode(\n    treeId: string | number,\n    updatedNode: LtpCurrentRealityTreeDataNode\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${treeId}`,\n      {\n        method: 'PUT',\n        body: JSON.stringify(updatedNode),\n      },\n      false\n    ) as Promise<void>;\n  }\n\n  public deleteNode(\n    treeId: string | number,\n    nodeId: string\n  ): Promise<void> {\n    return this.fetchWrapper(\n      this.baseUrlPath + `${this.baseLtpPath}${treeId}`,\n      {\n        method: 'DELETE',\n        body: JSON.stringify({ nodeId }),\n      },\n      false\n    ) as Promise<void>;\n  }\n}\n"]}