import type { ChatCompletionTool, ChatCompletionToolChoiceOption } from "openai/resources/chat/completions";
import { BaseChatModel } from "./baseChatModel.js";
export declare class OpenAiChat extends BaseChatModel {
    private client;
    private cfg;
    constructor(config: PsOpenAiModelConfig);
    /************************************  Public API  ************************************/
    generate(messages: PsModelMessage[], streaming?: boolean, streamingCallback?: (chunk: string) => void, 
    /** Future vision/audio media input */
    media?: {
        mimeType: string;
        data: string;
    }[], tools?: ChatCompletionTool[], toolChoice?: ChatCompletionToolChoiceOption | "auto", allowedTools?: string[]): Promise<PsBaseModelReturnParameters>;
    /************************************  Helpers  ************************************/
    private preprocessMessages;
    /** Build negative logit‑bias array if the caller limited tool usage. */
    private buildLogitBias;
    private handleStreaming;
    private handleNonStreaming;
    private handleToolCalls;
}
export default OpenAiChat;
//# sourceMappingURL=openAiChat.d.ts.map