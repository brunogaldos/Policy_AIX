import type { ChatCompletionTool } from "openai/resources/chat/completions";
import { PolicySynthAgent } from "./agent.js";
import { PsAgent } from "../dbModels/agent.js";
export declare enum AgentPhase {
    START = 0,
    PLAN = 1,
    CALL_TOOL = 2,
    OBSERVE = 3,
    FINISH = 4
}
export type ToolSpec = ChatCompletionTool;
export declare abstract class PolicySynthAgentTask extends PolicySynthAgent {
    readonly systemPrompt: string;
    protected static readonly TOOLS: ToolSpec[];
    protected readonly messages: PsModelMessage[];
    private pendingToolCalls;
    protected phase: AgentPhase;
    readonly runDir: string;
    private readonly dirs;
    constructor(agent: PsAgent, memory: PsAgentMemoryData, taskId: string, systemPrompt: string);
    run(userMessage: string): AsyncIterableIterator<PsModelMessage>;
    protected abstract policy(): readonly string[];
    protected isDone(): boolean;
    protected readonly fs: {
        mktemp: (bucket: keyof PolicySynthAgentTask["dirs"], prefix?: string, ext?: string) => string;
        writeText: (bucket: keyof PolicySynthAgentTask["dirs"], rel: string, data: string) => Promise<string>;
        readText: (bucket: keyof PolicySynthAgentTask["dirs"], rel: string) => Promise<string>;
        writeJSON: (bucket: keyof PolicySynthAgentTask["dirs"], rel: string, obj: unknown, pretty?: number) => Promise<string>;
        readJSON: (bucket: keyof PolicySynthAgentTask["dirs"], rel: string) => Promise<any>;
        list: (bucket: keyof PolicySynthAgentTask["dirs"], rel?: string) => Promise<import("fs").Dirent<string>[]>;
    };
    private planStep;
    private callToolStep;
    protected runTool(name: string, args: Record<string, unknown>): Promise<string>;
}
//# sourceMappingURL=agentTask.d.ts.map