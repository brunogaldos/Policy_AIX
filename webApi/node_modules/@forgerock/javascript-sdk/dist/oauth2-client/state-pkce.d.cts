import { GetAuthorizationUrlOptions } from './interfaces';
/**
 * Generate and store PKCE values for later use
 * @param { string } storageKey - Key to store authorization options in sessionStorage
 * @param {GenerateAndStoreAuthUrlValues} options - Options for generating PKCE values
 * @returns { state: string, verifier: string, GetAuthorizationUrlOptions }
 */
interface GenerateAndStoreAuthUrlValues extends GetAuthorizationUrlOptions {
    clientId: string;
    login?: 'redirect' | 'embedded';
    prefix?: string;
}
export declare function generateAndStoreAuthUrlValues(options: GenerateAndStoreAuthUrlValues): readonly [{
    state: string;
    verifier: string;
    clientId: string;
    login?: "redirect" | "embedded";
    prefix?: string;
    responseType: import('./enums').ResponseType;
    query?: import('../shared/interfaces').StringDict<string>;
    prompt?: "none" | "login" | "consent";
    callbackFactory?: import('..').FRCallbackFactory;
    middleware?: import('../config/interfaces').RequestMiddleware[];
    realmPath?: string;
    redirectUri?: string;
    scope?: string;
    serverConfig?: import('../config').ServerConfig;
    tokenStore?: import('../config/interfaces').TokenStoreObject | "sessionStorage" | "localStorage";
    tree?: string;
    type?: string;
    oauthThreshold?: number;
    logLevel?: import('../config/interfaces').LogLevel;
    logger?: import('..').LoggerFunctions;
    platformHeader?: boolean;
}, () => void];
/**
 * @function getStoredAuthUrlValues - Retrieve stored authorization options from sessionStorage
 * @param { string } storageKey - Key to retrieve stored values from sessionStorage
 * @returns { GetAuthorizationUrlOptions }
 */
export declare function getStoredAuthUrlValues(clientId: string, prefix?: string): GetAuthorizationUrlOptions;
export {};
//# sourceMappingURL=state-pkce.d.ts.map