"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const b=require("../auth/enums.cjs"),u=require("./enums.cjs"),c=require("./helpers.cjs"),y=require("./script-parser.cjs");class O{static getWebAuthnStepType(e){const a=this.getOutcomeCallback(e),t=this.getMetadataCallback(e),i=this.getTextOutputCallback(e);return a&&t?t.getOutputValue("data")?.pubKeyCredParams?u.WebAuthnStepType.Registration:u.WebAuthnStepType.Authentication:a&&i?i.getMessage().includes("pubKeyCredParams")?u.WebAuthnStepType.Registration:u.WebAuthnStepType.Authentication:u.WebAuthnStepType.None}static async authenticate(e){const{hiddenCallback:a,metadataCallback:t,textOutputCallback:i}=this.getCallbacks(e);if(a&&(t||i)){let o,n=null;try{let r;if(t){const s=t.getOutputValue("data");r=this.createAuthenticationPublicKey(s),n=await this.getAuthenticationCredential(r),o=this.getAuthenticationOutcome(n)}else if(i)r=y.parseWebAuthnAuthenticateText(i.getMessage()),n=await this.getAuthenticationCredential(r),o=this.getAuthenticationOutcome(n);else throw new Error("No Credential found from Public Key")}catch(r){throw r instanceof Error?r.name===u.WebAuthnOutcomeType.NotSupportedError?(a.setInputValue(u.WebAuthnOutcome.Unsupported),r):(a.setInputValue(`${u.WebAuthnOutcome.Error}::${r.name}:${r.message}`),r):r}return t&&t.getOutputValue("data")?.supportsJsonResponse&&n&&"authenticatorAttachment"in n?(a.setInputValue(JSON.stringify({authenticatorAttachment:n.authenticatorAttachment,legacyData:o})),e):(a.setInputValue(o),e)}else{const o=new Error("Incorrect callbacks for WebAuthn authentication");throw o.name=u.WebAuthnOutcomeType.DataError,a?.setInputValue(`${u.WebAuthnOutcome.Error}::${o.name}:${o.message}`),o}}static async register(e,a){const{hiddenCallback:t,metadataCallback:i,textOutputCallback:o}=this.getCallbacks(e);if(t&&(i||o)){let n,r=null;try{let s;if(i){const l=i.getOutputValue("data");s=this.createRegistrationPublicKey(l),r=await this.getRegistrationCredential(s),n=this.getRegistrationOutcome(r)}else if(o)s=y.parseWebAuthnRegisterText(o.getMessage()),r=await this.getRegistrationCredential(s),n=this.getRegistrationOutcome(r);else throw new Error("No Credential found from Public Key")}catch(s){throw s instanceof Error?s.name===u.WebAuthnOutcomeType.NotSupportedError?(t.setInputValue(u.WebAuthnOutcome.Unsupported),s):(t.setInputValue(`${u.WebAuthnOutcome.Error}::${s.name}:${s.message}`),s):s}return i&&i.getOutputValue("data")?.supportsJsonResponse&&r&&"authenticatorAttachment"in r?(t.setInputValue(JSON.stringify({authenticatorAttachment:r.authenticatorAttachment,legacyData:a&&a.length>0?`${n}::${a}`:n})),e):(t.setInputValue(a&&a.length>0?`${n}::${a}`:n),e)}else{const n=new Error("Incorrect callbacks for WebAuthn registration");throw n.name=u.WebAuthnOutcomeType.DataError,t?.setInputValue(`${u.WebAuthnOutcome.Error}::${n.name}:${n.message}`),n}}static getCallbacks(e){const a=this.getOutcomeCallback(e),t=this.getMetadataCallback(e),i=this.getTextOutputCallback(e),o={hiddenCallback:a};return t?o.metadataCallback=t:i&&(o.textOutputCallback=i),o}static getMetadataCallback(e){return e.getCallbacksOfType(b.CallbackType.MetadataCallback).find(a=>{const t=a.getOutputByName("data",void 0);return t&&t.hasOwnProperty("relyingPartyId")})}static getOutcomeCallback(e){return e.getCallbacksOfType(b.CallbackType.HiddenValueCallback).find(a=>a.getOutputByName("id","")==="webAuthnOutcome")}static getTextOutputCallback(e){return e.getCallbacksOfType(b.CallbackType.TextOutputCallback).find(a=>{const t=a.getOutputByName("message",void 0);return t&&t.includes("webAuthnOutcome")})}static async getAuthenticationCredential(e){if(!window.PublicKeyCredential){const t=new Error("PublicKeyCredential not supported by this browser");throw t.name=u.WebAuthnOutcomeType.NotSupportedError,t}return await navigator.credentials.get({publicKey:e})}static getAuthenticationOutcome(e){if(e===null){const a=new Error("No credential generated from authentication");throw a.name=u.WebAuthnOutcomeType.UnknownError,a}try{const a=c.arrayBufferToString(e.response.clientDataJSON),t=e.response,i=new Int8Array(t.authenticatorData).toString(),o=new Int8Array(t.signature).toString(),n=c.arrayBufferToString(e.response.userHandle);let r=`${a}::${i}::${o}::${e.id}`;return n&&(r=`${r}::${n}`),r}catch{const t=new Error("Transforming credential object to string failed");throw t.name=u.WebAuthnOutcomeType.EncodingError,t}}static async getRegistrationCredential(e){if(!window.PublicKeyCredential){const t=new Error("PublicKeyCredential not supported by this browser");throw t.name=u.WebAuthnOutcomeType.NotSupportedError,t}return await navigator.credentials.create({publicKey:e})}static getRegistrationOutcome(e){if(e===null){const a=new Error("No credential generated from registration");throw a.name=u.WebAuthnOutcomeType.UnknownError,a}try{const a=c.arrayBufferToString(e.response.clientDataJSON),t=e.response,i=new Int8Array(t.attestationObject).toString();return`${a}::${i}::${e.id}`}catch{const t=new Error("Transforming credential object to string failed");throw t.name=u.WebAuthnOutcomeType.EncodingError,t}}static createAuthenticationPublicKey(e){const{acceptableCredentials:a,allowCredentials:t,challenge:i,relyingPartyId:o,timeout:n,userVerification:r}=e,s=c.parseRelyingPartyId(o),l=c.parseCredentials(t||a||"");return{challenge:Uint8Array.from(atob(i),p=>p.charCodeAt(0)).buffer,timeout:n,...l&&{allowCredentials:l},...r&&{userVerification:r},...s&&{rpId:s}}}static createRegistrationPublicKey(e){const{pubKeyCredParams:a}=e,t=c.parsePubKeyArray(a);if(!t){const h=new Error("Missing pubKeyCredParams property from registration options");throw h.name=u.WebAuthnOutcomeType.DataError,h}const i=c.parseCredentials(e.excludeCredentials),{attestationPreference:o,authenticatorSelection:n,challenge:r,relyingPartyId:s,relyingPartyName:l,timeout:p,userId:f,userName:g,displayName:d}=e,m=c.parseRelyingPartyId(s),C={name:l,...m&&{id:m}};return{attestation:o,authenticatorSelection:JSON.parse(n),challenge:Uint8Array.from(atob(r),h=>h.charCodeAt(0)).buffer,...i.length&&{excludeCredentials:i},pubKeyCredParams:t,rp:C,timeout:p,user:{displayName:d||g,id:Int8Array.from(f.split("").map(h=>h.charCodeAt(0))),name:d||g}}}}exports.WebAuthnOutcome=u.WebAuthnOutcome;exports.WebAuthnStepType=u.WebAuthnStepType;exports.default=O;
