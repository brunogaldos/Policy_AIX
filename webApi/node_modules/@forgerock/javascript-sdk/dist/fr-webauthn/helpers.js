import { WebAuthnOutcomeType as o } from "./enums.js";
function s(r) {
  return r || [];
}
function u(r) {
  const n = new Uint8Array(r);
  return new TextDecoder().decode(n);
}
function f(r) {
  return r ? r[1] : "";
}
function a(r) {
  try {
    return r.split("}").filter((e) => !!e && e !== "]").map((e) => {
      const t = c(e);
      return {
        id: new Int8Array(t).buffer,
        type: "public-key"
      };
    });
  } catch {
    const e = new Error("Transforming credential object to string failed");
    throw e.name = o.EncodingError, e;
  }
}
function c(r) {
  const n = /new Int8Array\((.+)\)/.exec(r);
  return n === null || n.length < 2 ? [] : JSON.parse(n[1]);
}
function p(r) {
  if (Array.isArray(r))
    return r;
  if (typeof r == "string")
    return r && r[0] === "[" ? JSON.parse(r) : (r = r.replace(/(\w+):/g, '"$1":'), JSON.parse(`[${r}]`));
}
function d(r) {
  return r.includes("rpId") ? r.replace(/rpId: "(.+)",/, "$1") : r.replace(/id: "(.+)",/, "$1");
}
export {
  u as arrayBufferToString,
  s as ensureArray,
  f as getIndexOne,
  a as parseCredentials,
  c as parseNumberArray,
  p as parsePubKeyArray,
  d as parseRelyingPartyId
};
