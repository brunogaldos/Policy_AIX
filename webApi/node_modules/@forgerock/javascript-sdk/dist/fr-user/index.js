import { FRLogger as t } from "../util/logger.js";
import n from "../oauth2-client/index.js";
import c from "../session-manager/index.js";
import f from "../token-manager/index.js";
import l from "../config/index.js";
import u from "../token-storage/index.js";
class S {
  /**
   * Logs the user in with the specified step handler, acquires OAuth tokens, and retrieves
   * user profile.  **Currently not implemented.**
   *
   * @typeparam T The type of user object expected
   * @param handler The function to invoke when handling authentication steps
   * @param options Configuration overrides
   */
  static async login(e, r) {
    throw t.info(e, r), new Error("FRUser.login() not implemented");
  }
  /**
   * Ends the user's session and revokes OAuth tokens.
   *
   * @param options Configuration overrides
   */
  static async logout(e) {
    const r = { ...e };
    delete r.redirect;
    const { serverConfig: o } = l.get(r);
    if (!o.paths || o.paths && "sessions" in o.paths)
      try {
        await c.logout(r);
      } catch {
        t.warn("Session logout was not successful");
      }
    if (e?.redirect === !1)
      try {
        await n.endSession({ ...e });
      } catch {
        t.warn("OAuth endSession was not successful");
      }
    try {
      await n.revokeToken(r);
    } catch {
      t.warn("OAuth revokeToken was not successful");
    }
    const a = await u.get(), { idToken: i = "" } = a || {};
    if (await f.deleteTokens(), e?.redirect !== !1)
      try {
        await n.endSession({ ...e, idToken: i });
      } catch {
        t.warn("OAuth endSession was not successful");
      }
  }
}
export {
  S as default
};
