import { configureStore as c } from "@reduxjs/toolkit";
import { deviceService as d } from "./services/index.js";
const p = (n) => {
  const { middleware: i, reducerPath: o, reducer: s, endpoints: r } = d({
    baseUrl: n.serverConfig?.baseUrl ?? "",
    realmPath: n?.realmPath ?? ""
  }), a = c({
    reducer: {
      [o]: s
    },
    middleware: (e) => e().concat(i)
  });
  return {
    /**
     * Oath device management methods.
     *
     * @type {OathManagement}
     */
    oath: {
      /**
       * Retrieves Oath devices based on the specified query.
       *
       * @async
       * @function get
       * @param {RetrieveOathQuery} query - The query used to retrieve Oath devices.
       * @returns {Promise<OAthResponse | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
       */
      get: async function(e) {
        try {
          const t = await a.dispatch(r.getOAthDevices.initiate(e));
          if (!t || !t.data || !t.data.result)
            throw new Error("response did not contain data");
          return t.data.result;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Deletes an Oath device based on the provided query and device information.
       *
       * @async
       * @function delete
       * @param {DeleteOathQuery & OathDevice} query - The query and device information used to delete the Oath device.
       * @returns {Promise<DeletedOathDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      delete: async function(e) {
        try {
          const t = await a.dispatch(r.deleteOathDevice.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      }
    },
    /**
     * Push device management methods.
     *
     * @type {PushManagement}
     */
    push: {
      /**
       * Retrieves Push devices based on the specified query.
       *
       * @async
       * @function get
       * @param {PushDeviceQuery} query - The query used to retrieve Push devices.
       * @returns {Promise<PushDevice[] | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
       */
      get: async function(e) {
        try {
          const t = await a.dispatch(r.getPushDevices.initiate(e));
          if (!t || !t.data || !t.data.result)
            throw new Error("response did not contain data");
          return t.data.result;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Deletes a Push device based on the provided query.
       *
       * @async
       * @function delete
       * @param {DeleteDeviceQuery} query - The query used to delete the Push device.
       * @returns {Promise<PushDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      delete: async function(e) {
        try {
          const t = await a.dispatch(r.deletePushDevice.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      }
    },
    /**
     * WebAuthn device management methods.
     *
     * @type {WebAuthnManagement}
     */
    webAuthn: {
      /**
       * Retrieves WebAuthn devices based on the specified query.
       *
       * @async
       * @function get
       * @param {WebAuthnQuery} query - The query used to retrieve WebAuthn devices.
       * @returns {Promise<WebAuthnDevicesResponse | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
       */
      get: async function(e) {
        try {
          const t = await a.dispatch(r.getWebAuthnDevices.initiate(e));
          if (!t || !t.data || !t.data.result)
            throw new Error("response did not contain data");
          return t.data.result;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Updates the name of a WebAuthn device based on the provided query and body.
       *
       * @async
       * @function update
       * @param {WebAuthnQueryWithUUID & { device: WebAuthnBody } } query - The query and body used to update the WebAuthn device name.
       * @returns {Promise<UpdatedWebAuthnDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      update: async function(e) {
        try {
          const t = await a.dispatch(r.updateWebAuthnDeviceName.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Deletes a WebAuthn device based on the provided query and body.
       *
       * @async
       * @function delete
       * @param {WebAuthnQueryWithUUID & { device: WebAuthnBody } } query - The query and body used to delete the WebAuthn device.
       * @returns {Promise<WebAuthnDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      delete: async function(e) {
        try {
          const t = await a.dispatch(r.deleteWebAuthnDeviceName.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      }
    },
    /**
     * Bound devices management methods.
     *
     * @type {BoundDevicesManagement}
     */
    bound: {
      /**
       * Retrieves bound devices based on the specified query.
       *
       * @async
       * @function get
       * @param {BoundDeviceQuery} query - The query used to retrieve bound devices.
       * @returns {Promise<Device[] | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
       */
      get: async function(e) {
        try {
          const t = await a.dispatch(r.getBoundDevices.initiate(e));
          if (!t || !t.data || !t.data.result)
            throw new Error("response did not contain data");
          return t.data.result;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Deletes a bound device based on the provided query.
       *
       * @async
       * @function delete
       * @param {BoundDeviceQuery} query - The query used to delete the bound device.
       * @returns {Promise<Device | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      delete: async function(e) {
        try {
          const t = await a.dispatch(r.deleteBoundDevice.initiate(e));
          if (!t || !t.data || !t.data.result)
            throw new Error("response did not contain data");
          return t.data.result;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Updates the name of a bound device based on the provided query.
       *
       * @async
       * @function update
       * @param {BoundDeviceQuery} query - The query used to update the bound device name.
       * @returns {Promise<Device | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      update: async function(e) {
        try {
          const t = await a.dispatch(r.updateBoundDevice.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      }
    },
    profile: {
      /**
       * Get profile devices
       *
       * @async
       * @function update
       * @param {GetProfileDevice} query - The query used to get profile devices
       * @returns {Promise<Device[] | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      get: async function(e) {
        try {
          const t = await a.dispatch(r.getDeviceProfiles.initiate(e));
          if (!t || !t.data || !t.data.result)
            throw new Error("response did not contain data");
          return t.data.result;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Get profile devices
       *
       * @async
       * @function update
       * @param {ProfileDevicesQuery} query - The query used to update a profile device
       * @returns {Promise<ProfileDevice | { error: unknown }>} - A promise that resolves to the response data or or an error object if the response is not valid.
       */
      update: async function(e) {
        try {
          const t = await a.dispatch(r.updateDeviceProfile.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      },
      /**
       * Get profile devices
       *
       * @async
       * @function update
       * @param {ProfileDevicesQuery} query - The query used to update a profile device
       * @returns {Promise<ProfileDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
       */
      delete: async function(e) {
        try {
          const t = await a.dispatch(r.deleteDeviceProfile.initiate(e));
          if (!t || !t.data)
            throw new Error("response did not contain data");
          return t.data;
        } catch (t) {
          return { error: t };
        }
      }
    }
  };
};
export {
  p as deviceClient
};
