import { DeletedOathDevice, OathDevice, OathResponse, RetrieveOathQuery } from '../types/oath.types.js';
import { DeleteDeviceQuery, DeletedPushDevice, PushDevice, PushDeviceQuery } from '../types/push-device.types.js';
import { BoundDeviceQuery, Device, GetBoundDevicesQuery } from '../types/bound-device.types.js';
import { UpdatedWebAuthnDevice, WebAuthnDevice, WebAuthnQuery } from '../types/webauthn.types.js';
import { GetProfileDevices, ProfileDevicesQuery, ProfileDevice } from '../types/profile-device.types.js';
export interface GeneralResponse<T> {
    pagedResultsCookie: string | null;
    remainingPagedResults: number;
    resultCount: number;
    totalPagedResults: number;
    totalPagedResultsPolicy: string;
    result: T;
}
export declare const deviceService: ({ baseUrl, realmPath }: {
    baseUrl: string;
    realmPath: string;
}) => import('@reduxjs/toolkit/query').Api<import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, {
    getOAthDevices: import('@reduxjs/toolkit/query').QueryDefinition<RetrieveOathQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, OathResponse, "deviceClient">;
    deleteOathDevice: import('@reduxjs/toolkit/query').MutationDefinition<RetrieveOathQuery & {
        device: OathDevice;
    }, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, DeletedOathDevice, "deviceClient">;
    getPushDevices: import('@reduxjs/toolkit/query').QueryDefinition<PushDeviceQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, GeneralResponse<PushDevice[]>, "deviceClient">;
    deletePushDevice: import('@reduxjs/toolkit/query').MutationDefinition<DeleteDeviceQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, DeletedPushDevice, "deviceClient">;
    getWebAuthnDevices: import('@reduxjs/toolkit/query').QueryDefinition<WebAuthnQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, GeneralResponse<WebAuthnDevice[]>, "deviceClient">;
    updateWebAuthnDeviceName: import('@reduxjs/toolkit/query').MutationDefinition<WebAuthnQuery & {
        device: WebAuthnDevice;
    }, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, UpdatedWebAuthnDevice, "deviceClient">;
    deleteWebAuthnDeviceName: import('@reduxjs/toolkit/query').MutationDefinition<WebAuthnQuery & {
        device: UpdatedWebAuthnDevice | WebAuthnDevice;
    }, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, UpdatedWebAuthnDevice, "deviceClient">;
    getBoundDevices: import('@reduxjs/toolkit/query').MutationDefinition<GetBoundDevicesQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, GeneralResponse<Device[]>, "deviceClient">;
    updateBoundDevice: import('@reduxjs/toolkit/query').MutationDefinition<BoundDeviceQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, Device, "deviceClient">;
    deleteBoundDevice: import('@reduxjs/toolkit/query').MutationDefinition<BoundDeviceQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, GeneralResponse<Device>, "deviceClient">;
    getDeviceProfiles: import('@reduxjs/toolkit/query').QueryDefinition<GetProfileDevices, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, GeneralResponse<ProfileDevice[]>, "deviceClient">;
    updateDeviceProfile: import('@reduxjs/toolkit/query').MutationDefinition<Omit<ProfileDevicesQuery, "uuid">, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, ProfileDevice, "deviceClient">;
    deleteDeviceProfile: import('@reduxjs/toolkit/query').MutationDefinition<ProfileDevicesQuery, import('@reduxjs/toolkit/query').BaseQueryFn<string | import('@reduxjs/toolkit/query').FetchArgs, unknown, import('@reduxjs/toolkit/query').FetchBaseQueryError, {}, import('@reduxjs/toolkit/query').FetchBaseQueryMeta>, never, ProfileDevice, "deviceClient">;
}, "deviceClient", never, typeof import('@reduxjs/toolkit/query').coreModuleName>;
//# sourceMappingURL=index.d.ts.map