import { ConfigOptions } from '../config/interfaces';
import { DeletedOathDevice, OathDevice, RetrieveOathQuery } from './types/oath.types.js';
import { DeleteDeviceQuery, DeletedPushDevice, PushDevice, PushDeviceQuery } from './types/push-device.types.js';
import { UpdatedWebAuthnDevice, WebAuthnDevice, WebAuthnQuery } from './types/webauthn.types.js';
import { BoundDeviceQuery, Device, GetBoundDevicesQuery } from './types/bound-device.types.js';
import { GetProfileDevices, ProfileDevice, ProfileDevicesQuery } from './types/profile-device.types.js';
export declare const deviceClient: (config: ConfigOptions) => {
    /**
     * Oath device management methods.
     *
     * @type {OathManagement}
     */
    oath: {
        /**
         * Retrieves Oath devices based on the specified query.
         *
         * @async
         * @function get
         * @param {RetrieveOathQuery} query - The query used to retrieve Oath devices.
         * @returns {Promise<OAthResponse | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
         */
        get: (query: RetrieveOathQuery) => Promise<OathDevice[] | {
            error: unknown;
        }>;
        /**
         * Deletes an Oath device based on the provided query and device information.
         *
         * @async
         * @function delete
         * @param {DeleteOathQuery & OathDevice} query - The query and device information used to delete the Oath device.
         * @returns {Promise<DeletedOathDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        delete: (query: RetrieveOathQuery & {
            device: OathDevice;
        }) => Promise<DeletedOathDevice | {
            error: unknown;
        }>;
    };
    /**
     * Push device management methods.
     *
     * @type {PushManagement}
     */
    push: {
        /**
         * Retrieves Push devices based on the specified query.
         *
         * @async
         * @function get
         * @param {PushDeviceQuery} query - The query used to retrieve Push devices.
         * @returns {Promise<PushDevice[] | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
         */
        get: (query: PushDeviceQuery) => Promise<PushDevice[] | {
            error: unknown;
        }>;
        /**
         * Deletes a Push device based on the provided query.
         *
         * @async
         * @function delete
         * @param {DeleteDeviceQuery} query - The query used to delete the Push device.
         * @returns {Promise<PushDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        delete: (query: DeleteDeviceQuery) => Promise<DeletedPushDevice | {
            error: unknown;
        }>;
    };
    /**
     * WebAuthn device management methods.
     *
     * @type {WebAuthnManagement}
     */
    webAuthn: {
        /**
         * Retrieves WebAuthn devices based on the specified query.
         *
         * @async
         * @function get
         * @param {WebAuthnQuery} query - The query used to retrieve WebAuthn devices.
         * @returns {Promise<WebAuthnDevicesResponse | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
         */
        get: (query: WebAuthnQuery) => Promise<WebAuthnDevice[] | {
            error: unknown;
        }>;
        /**
         * Updates the name of a WebAuthn device based on the provided query and body.
         *
         * @async
         * @function update
         * @param {WebAuthnQueryWithUUID & { device: WebAuthnBody } } query - The query and body used to update the WebAuthn device name.
         * @returns {Promise<UpdatedWebAuthnDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        update: (query: WebAuthnQuery & {
            device: WebAuthnDevice;
        }) => Promise<UpdatedWebAuthnDevice | {
            error: unknown;
        }>;
        /**
         * Deletes a WebAuthn device based on the provided query and body.
         *
         * @async
         * @function delete
         * @param {WebAuthnQueryWithUUID & { device: WebAuthnBody } } query - The query and body used to delete the WebAuthn device.
         * @returns {Promise<WebAuthnDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        delete: (query: WebAuthnQuery & {
            device: WebAuthnDevice | UpdatedWebAuthnDevice;
        }) => Promise<UpdatedWebAuthnDevice | {
            error: unknown;
        }>;
    };
    /**
     * Bound devices management methods.
     *
     * @type {BoundDevicesManagement}
     */
    bound: {
        /**
         * Retrieves bound devices based on the specified query.
         *
         * @async
         * @function get
         * @param {BoundDeviceQuery} query - The query used to retrieve bound devices.
         * @returns {Promise<Device[] | { error: unknown }>} - A promise that resolves to the retrieved data or an error object if the response is not valid.
         */
        get: (query: GetBoundDevicesQuery) => Promise<Device[] | {
            error: unknown;
        }>;
        /**
         * Deletes a bound device based on the provided query.
         *
         * @async
         * @function delete
         * @param {BoundDeviceQuery} query - The query used to delete the bound device.
         * @returns {Promise<Device | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        delete: (query: BoundDeviceQuery) => Promise<Device | {
            error: unknown;
        }>;
        /**
         * Updates the name of a bound device based on the provided query.
         *
         * @async
         * @function update
         * @param {BoundDeviceQuery} query - The query used to update the bound device name.
         * @returns {Promise<Device | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        update: (query: BoundDeviceQuery) => Promise<Device | {
            error: unknown;
        }>;
    };
    profile: {
        /**
         * Get profile devices
         *
         * @async
         * @function update
         * @param {GetProfileDevice} query - The query used to get profile devices
         * @returns {Promise<Device[] | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        get: (query: GetProfileDevices) => Promise<ProfileDevice[] | {
            error: unknown;
        }>;
        /**
         * Get profile devices
         *
         * @async
         * @function update
         * @param {ProfileDevicesQuery} query - The query used to update a profile device
         * @returns {Promise<ProfileDevice | { error: unknown }>} - A promise that resolves to the response data or or an error object if the response is not valid.
         */
        update: (query: ProfileDevicesQuery) => Promise<ProfileDevice | {
            error: unknown;
        }>;
        /**
         * Get profile devices
         *
         * @async
         * @function update
         * @param {ProfileDevicesQuery} query - The query used to update a profile device
         * @returns {Promise<ProfileDevice | { error: unknown }>} - A promise that resolves to the response data or an error object if the response is not valid.
         */
        delete: (query: ProfileDevicesQuery) => Promise<ProfileDevice | {
            error: unknown;
        }>;
    };
};
//# sourceMappingURL=device.store.d.ts.map